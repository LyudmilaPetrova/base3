
// Center-align a block level element
.center-block() {
  	display: block;
  	margin-left: auto;
  	margin-right: auto;
}

.container-fixed() {
  	width: @gridRowWidth;
  	margin-left: auto;
  	margin-right: auto;
  	.clearfix-fn();
}

// Grid system
#grid {

    // Fixed grid system
    #fixed {
		// Setup the mixins to be used
		.columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, @columns) {
			width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
		}

		.offset(@gridColumnWidth, @gridGutterWidth, @columns) {
			margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1)) + (@gridGutterWidth * 2);
		}

		.gridColumn(@gridGutterWidth) {
			float: left;
			margin-left: @gridGutterWidth;
		}

		// Take these values and mixins, and make 'em do their thang
		.generate(@gridColumns, @gridColumnWidth, @gridGutterWidth) {
			// Row surrounds the columns
			.row {
				margin-left: @gridGutterWidth * -1;
				.clearfix-fn();
			}

			// Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks @dhg)
			[class*="span"] {
				#grid > #fixed > .gridColumn(@gridGutterWidth);
			}

			// Default columns
			.span1     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 1); }
			.span2     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 2); }
			.span3     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 3); }
			.span4     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 4); }
			.span5     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 5); }
			.span6     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 6); }
			.span7     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 7); }
			.span8     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 8); }
			.span9     { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 9); }
			.span10    { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 10); }
			.span11    { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 11); }
			.span12,
			.container { #grid > #fixed > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 12); }

			// Offset column options
			.offset1   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 1); }
			.offset2   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 2); }
			.offset3   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 3); }
			.offset4   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 4); }
			.offset5   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 5); }
			.offset6   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 6); }
			.offset7   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 7); }
			.offset8   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 8); }
			.offset9   { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 9); }
			.offset10  { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 10); }
			.offset11  { #grid > #fixed > .offset(@gridColumnWidth, @gridGutterWidth, 11); }
		}
  	}

  	// Fluid grid system
   	#fluid {
   		// Setup the mixins to be used
   		.columns(@fluidGridGutterWidth, @fluidGridColumnWidth, @columns) {
   			width: 1% * (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
   		}

   		.gridColumn(@fluidGridGutterWidth) {
   			float: left;
   			margin-left: @fluidGridGutterWidth;
   		}

   		// Take these values and mixins, and make 'em do their thang
   		.generate(@gridColumns, @fluidGridColumnWidth, @fluidGridGutterWidth) {
   			// Row surrounds the columns
   			.row-fluid {
   				width: 100%;
   				.clearfix-fn();

   				// Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks @dhg)
   				> [class*="span"] {
   					#grid > #fluid > .gridColumn(@fluidGridGutterWidth);
   				}

   				> [class*="span"]:first-child {
   					margin-left: 0;
   				}

   				 // Default columns
   				.span1     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 1); }
   				.span2     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 2); }
   				.span3     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 3); }
   				.span4     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 4); }
   				.span5     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 5); }
   				.span6     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 6); }
   				.span7     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 7); }
   				.span8     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 8); }
   				.span9     { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 9); }
   				.span10    { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 10); }
   				.span11    { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 11); }
   				.span12    { #grid > #fluid > .columns(@fluidGridGutterWidth, @fluidGridColumnWidth, 12); }
   			}
   		}
   	}

   	// Input grid system
	#input {
		.inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, @columns) {
			width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 10;
		}

		.generate(@gridColumns, @gridColumnWidth, @gridGutterWidth) {
			input,
			textarea,
			.uneditable-input {
				&.span1     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 1); }
				&.span2     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 2); }
				&.span3     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 3); }
				&.span4     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 4); }
				&.span5     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 5); }
				&.span6     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 6); }
				&.span7     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 7); }
				&.span8     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 8); }
				&.span9     { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 9); }
				&.span10    { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 10); }
				&.span11    { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 11); }
				&.span12    { #grid > #input > .inputColumns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 12); }
			}
		}
	}

	// Table grid system
	#table {
		// Change the columns
        .tableColumns(@gridColumnWidth, @gridGutterWidth, @columnSpan: 1) {
          	float: none;
          	width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16;
          	margin-left: 0;
        }

        .generate(@gridColumns, @gridColumnWidth, @gridGutterWidth) {
			table {
				.span1     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 1); }
				.span2     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 2); }
				.span3     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 3); }
				.span4     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 4); }
				.span5     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 5); }
				.span6     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 6); }
				.span7     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 7); }
				.span8     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 8); }
				.span9     { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 9); }
				.span10    { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 10); }
				.span11    { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 11); }
				.span12    { #grid > #table > .tableColumns(@gridColumnWidth, @gridGutterWidth, 12); }
			}
		}
	}

	// Show grid
	.show() {
        margin-top: 10px;
        margin-bottom: 20px;

        [class*="span"] {
        	background-color: #eee;
          	text-align: center;
          	.border-radius(3px);
          	min-height: 30px;
          	line-height: 30px;
        }

        &:hover [class*="span"] {
          	background: #ddd;
        }

        .show-grid {
          	margin-top: 0;
          	margin-bottom: 0;
        }

        .show-grid [class*="span"] {
          	background-color: #ccc;
        }
	}
}





